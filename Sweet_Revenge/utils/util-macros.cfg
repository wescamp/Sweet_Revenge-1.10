#textdomain wesnoth-SR
#"Borrowed" from IFtU - Thousands of Kudos to Shadowmaster.
# NOTE: Aside from the WEAPON_SPECIAL_DEFENSE_ONLY and the spawning code, these are strictly
#syntactic shortcuts.
#define RESPAWN_EVENT TYPES SIDE X Y RESPAWN RESPAWN_TIMEOUT

    [event]
	name=side turn ###The first time the user allows it to fire###
	{RANDOM ({TYPES})}
        [unit]
	    type=$random
	    side={SIDE}
	    x={X}
	    y={Y}
	    id=spawn_{X}_{Y}
	[/unit]
	{CLEAR_VARIABLE random}
    [/event]
    [event]
        name=respawn {X} {Y}
        first_time_only=no
	{RANDOM ({TYPES})}
        [unit]
	    type=$random
	    side={SIDE}
	    x={X}
	    y={Y}
	    id=spawn_{X}_{Y}
	[/unit]
	{GUARDIAN}
	{CLEAR_VARIABLE random}
    [/event]

    [event]
        name=die
	delayed_variable_substitution=no
        first_time_only=no
        [filter]
            id=spawn_{X}_{Y}
        [/filter]

        [set_variable]
            name=chance_to_continue
            rand=0..100
        [/set_variable]

        [set_variable]
            name=chance_to_continue
            modulo=23
        [/set_variable]

        [set_variable]
            name=respawn_flag
            value={RESPAWN}
        [/set_variable]

        [if]
            [variable]
                name=chance_to_continue
                numerical_not_equals=0
            [/variable]
            [and]
                [variable]
                    name=respawn_flag
                    boolean_equals=yes
                [/variable]
            [/and]
            [then]
                [set_variables]
                    name=respawn_event_WML
                    [value]
                        name="turn $($turn_number + {RESPAWN_TIMEOUT})"
                        [fire_event]
                            name=respawn {X} {Y}
                        [/fire_event]
                    [/value]
                [/set_variables]

                [insert_tag]
                    name=event
                    variable=respawn_event_WML
                [/insert_tag]

                [clear_variable]
                    name=respawn_event_WML
                [/clear_variable]
            [/then]
            [else]
            [/else]
        [/if]
        [clear_variable]
            name=chance_to_continue,respawn_flag
        [/clear_variable]
    [/event]
#enddef

#define VARIABLE_NUM_LESS_OR_EQUAL_THAN VARIABLE RVALUE
    [variable]
	name={VARIABLE}
	less_than_equal_to={RVALUE}
    [/variable]
#enddef

#ifdef EASY
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_EASY}#enddef
#endif
#ifdef NORMAL
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_NORMAL}#enddef
#endif
#ifdef HARD
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_HARD}#enddef
#endif

#define WEAPON_SPECIAL_DEFEND_ONLY
    [damage]
        id=attack_only
        name= _ "defend only"
        name_inactive= _ "defend only"
        description= _ "Defend only:
This weapon will only be available for defense."
        description_inactive= _ "Defend only:
This weapon will only be available for defense."
        multiply=0
        active_on=offense
    [/damage]
# wmlindent: start ignoring
    [/specials]
    attack_weight=0
    [+specials]
# wmlindent: stop ignoring
#enddef

#define DISALLOW_RECRUIT _SIDE _LIST
    [disallow_recruit]
        side={_SIDE}
        type={_LIST}
    [/disallow_recruit]
#enddef

#define SIGNPOST _X _Y _TEXT
    [item]
        x,y={_X},{_Y}
        image=scenery/signpost.png
    [/item]
    [event]
        name=moveto
        [filter]
            x,y={_X},{_Y}
            side=1
        [/filter]
        [redraw]
	[/redraw]
	[allow_undo]
	[/allow_undo]
        [message]
            speaker=narrator
            image="scenery/signpost.png"
            message={_TEXT}
        [/message]
    [/event]
#enddef

#---end IFtU macros---

#The following is an animation util from TLU
#images must be in the form 'bomb-(1).png|bomb-(2).png,etc' in order of appearance.
#IMAGE is what image PREFIX it is (e.g. "images/bomb-explosion")
#FRAMES defines how many images are in the animation
#X Y is the location of the animation
#TIME is the duration (in milliseconds) to play each frame
#define FAKE_SCENERY_ANIM IMAGE FRAMES X Y TIME
{VARIABLE animcounter 1}
[while]
    [variable]
	name=animcounter
	less_than_equal_to={FRAMES}
    [/variable]
    [do]
	[item]
	    x={X}
	    y={Y}
	    halo={IMAGE}-($animcounter).png
	[/item]
    
	[delay]
	    time={TIME}
	[/delay]
    
	[remove_item]
	    x,y={X},{Y}
	[/remove_item]
{NEXT animcounter}
#enddef
#---end TLU macros---

#define GIVE_GOLD _SIDE _EASY _NORMAL _HARD
    [gold]
        side={_SIDE}
        {QUANTITY amount {_EASY} {_NORMAL} {_HARD} }
    [/gold]
#enddef


#               ----MY MACROS---
#define TERRAIN_CHANGE TERRAIN X Y
    [terrain]
	terrain={TERRAIN}
	x,y={X},{Y}
	layer=both
    [/terrain]
#enddef

#define TERRAIN_IMPASSABLE X Y
    [terrain]
        x,y={X},{Y}
        terrain=^Xo
        layer=overlay
    [/terrain]
#enddef

#define NARRATOR_MESSAGE MESSAGE_TEXT
    [message]
        speaker=narrator
        message={MESSAGE_TEXT}
        image="data/core/images/wesnoth-icon.png"
    [/message]
#enddef


    #A brazier w/ a halo and lit area around it.
    #Basically some clever combining of different macros. - BK
#define CUSTOM_BRAZIER X Y TOD
    # Note that it will freeze while dialogue popups are onscreen.
    # Embed this at scenario toplevel, not within an event.

    #X Y defines location, TOD defines Time of Day. Acceptable values are:
    #{DAWN} {MORNING} {AFTERNOON} {DUSK} {FIRST_WATCH} {SECOND_WATCH}

#places lit brazier
    [terrain_graphics]
        x={X}
        y={Y}
        [tile]
            x=0
            y=0
            [image]
                layer=0
                name="../items/brazier-lit1:140,../items/brazier-lit2:140,../items/brazier-lit3:140,../items/brazier-lit4:140,../items/brazier-lit5:140,../items/brazier-lit6:140,../items/brazier-lit7:140,../items/brazier-lit8:140"
            [/image]
        [/tile]
    [/terrain_graphics]
#firey halo
    [event]
	name=prestart
	[item]
	    x={X}
	    y={Y}
	    halo=halo/fire-aura.png
	[/item]
#lights area according to preference
	[time_area]
	    x={X}
	    y={Y}
	    radius=2
	    {TOD}
	[/time_area]
    [/event]
#enddef

#Gives a goal to an entire side.
# Embed this at scenario toplevel, not within an event. - BK
#define MOVE_SIDE SIDE X Y
    [event]
	name=ai_push_start
	first_time_only="no"
	{MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
	[candidate_action]
	    id=push_to_destination
	    engine=fai
	    name=push_to_destination
	    type=movement
	    evaluation="{AI_CA_COMBAT_SCORE}+10"
	    action="move(me.loc, choose(unit_moves(me.loc),'mloc',-sum(map(simplest_path(mloc,loc({X},{Y}),me.loc), 'path_location', movement_cost( me, path_location ) ))) )"
	[/candidate_action]
	)}
    [/event]
    [event]
	name=start
	[fire_event]
	    name=ai_push_start
	[/fire_event]
    [/event]
#enddef

#---end macros---

#FACING takes se and sw as arguments
#define PLACE_DOOR X Y SIDE FACING IMPASSABLE
    [unit]
	type=Door
	x,y={X},{Y}
	side={SIDE}
	facing={FACING}
	id=door_{X}_{Y}
    [/unit]
    [item]
	x={X}
	y={Y}
	image="scenery/gate-rusty-{FACING}.png"
    [/item]
    {VARIABLE impassable ({IMPASSABLE})}
    [if]
	[variable]
	    name=impassable
	    boolean_equals=yes
	[/variable]
	[then]
	    [kill]
		id=door_{X}_{Y}
		animate=no
	    [/kill]
	    [terrain]
		x,y={X},{Y}
		terrain=^Xo
		layer=overlay
	    [/terrain]
	    {CLEAR_VARIABLE impassable}
	[/then]
    [/if]
#enddef

#define GENERIC_GUARDIAN_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef

#define GENERIC_GUARDIAN SIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
	side={SIDE}
        generate_name=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef

###Unit Utils###

#define LOYAL_GUARDIAN_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_name=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=loyal
    [/unit]
#enddef

#define LOYAL_GUARDIAN SIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
	side={SIDE}
        generate_name=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=loyal
    [/unit]
#enddef

#define ID_GENERIC_UNIT SIDE TYPE X Y ID_STRING
    # Creates a generic unit of TYPE belonging to SIDE at X,Y, which has a
    # generated gender and traits (just like a recruited unit).
    [unit]
        side={SIDE}
        type={TYPE}
        id={ID_STRING}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef
#define SR_RECALL_OR_CREATE TYPE ID_STRING X Y
    [if]
	[have_unit]
	    id={ID_STRING}
	    x,y=recall,recall
	[/have_unit]
	[then]
	    [recall]
		id={ID_STRING}
		x,y={X},{Y}
	    [/recall]
	[/then]
	[else]
	    [unit]
		type={TYPE}
		id={ID_STRING}
		x,y={X},{Y}
		generate_name=yes
		random_traits=yes
	    [/unit]
	[/else]
    [/if]
#enddef

###Random Event Utils###

#define TELEPORT_MAZE X_LOCS Y_LOCS TARGET EXIT_X EXIT_Y
    [event]
	name=prestart
	{VARIABLE exit 0}
	[store_locations]
	    x={X_LOCS}
	    y={Y_LOCS}
	    variable=possible_teleports
	[/store_locations]
	{FOREACH possible_teleports i}
	    {RANDOM 1..6}
	    {VARIABLE rune_number $random}
	    {PLACE_IMAGE "scenery/rune$rune_number|.png" $possible_teleports[$i].x $possible_teleports[$i].y}
	    {RANDOM 1..6}
	    {VARIABLE rune_number2 $random}
	    {PLACE_IMAGE "scenery/rune$rune_number2|-glow.png" $possible_teleports[$i].x "$($possible_teleports[$i].y + 1)"}
	{NEXT i}
	{CLEAR_VARIABLE rune_number}
	{CLEAR_VARIABLE rune_number2}
	[store_locations]
	    find_in=possible_teleports
	    variable=possible_teleports2
	[/store_locations]
	{FOREACH possible_teleports2 g}
	    {VARIABLE_OP possible_teleports2[$g].y add 1}
	{NEXT g}
    [/event]
    [event]
	name=moveto
	first_time_only=no
	[filter]
	    side=1
	    [filter_location]
		find_in=possible_teleports
		[or]
		    find_in=possible_teleports2
		[/or]
		[not]
		    x,y={TARGET}
		[/not]
	    [/filter_location]
	[/filter]
	[if]
	    [variable]
		name=exit
		equals=0
	    [/variable]
	    [then]
		[if]
		    [have_location]
			x,y=$x1,$y1
			find_in=possible_teleports
		    [/have_location]
		    [then]
			{RANDOM 0.."$($possible_teleports.length - 1)"}
			{VARIABLE j $random}
			{TELEPORT_UNIT (id=$unit.id) ($possible_teleports2[$j].x) ($possible_teleports2[$j].y)}
			{CLEAR_VARIABLE random}
			{CLEAR_VARIABLE j}
			[scroll_to_unit]
			    id=$unit.id
			[/scroll_to_unit]
		    [/then]
		    [else]
			{RANDOM 0.."$($possible_teleports2.length - 1)"}
			{VARIABLE h $random}
			{TELEPORT_UNIT (id=$unit.id) ($possible_teleports[$h].x) ($possible_teleports[$h].y)}
			{CLEAR_VARIABLE random}
			{CLEAR_VARIABLE h}
			[scroll_to_unit]
			    id=$unit.id
			[/scroll_to_unit]
		    [/else]
		[/if]
	    [/then]
	    [else]
		{TELEPORT_UNIT (id=$unit.id) {EXIT_X} {EXIT_Y}}
		[scroll_to_unit]
		    id=$unit.id
		[/scroll_to_unit]
	    [/else]
	[/if]
    [/event]
    [event]
	name=moveto
	[filter]
	    side=1
	    x,y={TARGET}
	[/filter]
	{TELEPORT_UNIT (id=$unit.id) {EXIT_X} {EXIT_Y}}
	[scroll_to_unit]
	    id=$unit.id
	[/scroll_to_unit]
	{NARRATOR_MESSAGE (_ "*click*")}
	[message]
	    speaker=$unit.id
	    message= _ "I've found the exit!"
	[/message]
	{VARIABLE exit 1}
    [/event]
    [event]
	name=victory
	{CLEAR_VARIABLE possible_teleports}
	{CLEAR_VARIABLE possible_teleports2}
	{CLEAR_VARIABLE exit}
    [/event]
    [event]
	name=defeat
	{CLEAR_VARIABLE possible_teleports}
	{CLEAR_VARIABLE possible_teleports2}
    [/event]
#enddef
#define SR_FLOATING_TEXT X Y TEXT
    [store_unit]
	[filter]
	    x,y={X},{Y}
	[/filter]
	kill=no
	variable=floating_{X}_{Y}
    [/store_unit]
    [unstore_unit]
	text= _ {TEXT}
	variable=floating_{X}_{Y}
    [/unstore_unit]
    {CLEAR_VARIABLE floating_{X}_{Y}}
#enddef